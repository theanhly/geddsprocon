package de.tuberlin.mcc.geddsprocon.geddsproconcore.datastreamprocessorconnectors.sparkconnectors;

import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorFactory;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorConfig;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.common.SerializationTool;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.SocketPool;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.*;
import org.apache.spark.serializer.KryoSerializer;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.*;
import org.apache.spark.streaming.receiver.Receiver;
import org.junit.Test;
import org.zeromq.ZMQ;
import scala.Tuple2;

import java.util.Arrays;

/**
 * (SINK) --sends_to--> (SOURCE)
 * If the test is a sink it takes test data and sends it to source.
 * Start a sink first and start a source after. The sink should send the test data to the source where it should be printed out.
 */

public class SparkTests {
    //
    // NEW PULL BASED APPROACH
    //

    // ======== Additional addresses test with new approach =======

    /**
     * (SINK)
     */
    @Test
    public void pullBasedApproachSimpleSink1() {
        try {
            ZMQ.Context context = ZMQ.context(1);

            //  Socket to talk to server
            System.out.println("Connecting to hello world server…");

            ZMQ.Socket sender = context.socket(ZMQ.PUSH);
            sender.connect("tcp://localhost:9665");

            String testString =  "HelloFromSpark a b c d e f g h i j k l m n o p q r s t u v w x y z";

            System.out.println("Sending: " + testString);
            sender.send(SerializationTool.serialize(testString), 0);

            SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[*]").set("spark.executor.memory","1g").set("spark.serializer", KryoSerializer.class.getName());
            JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));

            // Create an input stream with the custom receiver on target ip:port and count the
            // words in input stream of \n delimited text (eg. generated by 'nc')
            JavaReceiverInputDStream<String> lines =
                    ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createInputOperator(new DSPConnectorConfig.Builder("localhost", 9665)
                            .withDSP("spark")
                            .withSocketType(SocketPool.SocketType.PULL)
                            .build()));

            //      Split each line into words
            JavaDStream<String> words = lines.flatMap(
                    (FlatMapFunction<String, String>) x -> Arrays.asList(x.split(" ")).iterator()
            );


            //      Count each word in each batch
            JavaPairDStream<String, Integer> pairs = words.mapToPair(
                    (PairFunction<String, String, Integer>) s -> new Tuple2<>(s, 1)
            );

            pairs.foreachRDD((VoidFunction)DSPConnectorFactory.getInstance().createOutputOperator(new DSPConnectorConfig.Builder("localhost", 9656)
                    .withDSP("spark")
                    .withBufferConnectorString("sendbuffer")
                    .withHWM(20)
                    .withTimeout(10000)
                    .build()));

            //wordCounts.print();
            ssc.start();
            ssc.awaitTermination();
        } catch(Exception ex) {
            System.err.println(ex.toString() + ex.getStackTrace());
        }
    }

    /**
     * (SINK)
     * BEFORE STARTING THE TEST: complex sink needs a netcat listener at port 9755.
     * 1. start a terminal
     * 2. nc -l 9755
     * 3. start this test
     */
    @Test
    public void pullBasedApproachComplexSink1() {
        try {
            ZMQ.Context context = ZMQ.context(1);

            //  Socket to talk to server
            System.out.println("Connecting to hello world server…");

            ZMQ.Socket sender = context.socket(ZMQ.PUSH);
            sender.connect("tcp://localhost:9665");

            String[] testArray = new String[5];
            testArray[0] = "HelloFromSpark a a a a a a a a b b b b b b b b a a a a a b b b b";
            testArray[1] = "c c c c a a a b b b";
            testArray[2] = "a a a a d d d d";
            testArray[3] = "e e e e e a a a b";
            testArray[4] = "u u u m m m m m c c c";

            for(int i = 0; i < testArray.length; i++) {
                System.out.println("Sending: " + testArray[i]);
                sender.send(SerializationTool.serialize(testArray[i]), 0);
            }

            SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[3]");
            JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));



            // Create an input stream with the custom receiver on target ip:port and count the
            // words in input stream of \n delimited text (eg. generated by 'nc')
            JavaReceiverInputDStream<String> lines =
                    ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createInputOperator(new DSPConnectorConfig.Builder("localhost", 9665)
                            .withDSP("spark")
                            .withSocketType(SocketPool.SocketType.PULL)
                            .build()));

            JavaReceiverInputDStream<String> lines2 = ssc.socketTextStream("localhost", 9755);

            JavaDStream unionLines = lines.union(lines2);

            //      Split each line into words
            JavaDStream<String> words = unionLines.flatMap(
                    (FlatMapFunction<String, String>) x -> Arrays.asList(x.split(" ")).iterator()
            );


            //      Count each word in each batch
            JavaPairDStream<String, Integer> pairs = words.mapToPair(
                    (PairFunction<String, String, Integer>) s -> new Tuple2<>(s, 1)
            );

            pairs.foreachRDD((VoidFunction)DSPConnectorFactory.getInstance().createOutputOperator(new DSPConnectorConfig.Builder("localhost", 9656)
                    .withDSP("spark")
                    .withBufferConnectorString("sendbuffer")
                    .withHWM(20)
                    .withTimeout(10000)
                    .build()));

            pairs.print();
            ssc.start();
            ssc.awaitTermination();
        } catch(Exception ex) {
            System.err.println(ex.toString() + ex.getStackTrace());
        }
    }

    /**
     * (SOURCE)
     */
    @Test
    public void pullBasedApproachPrimarySource1() {
        try {

            SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[*]").set("spark.executor.memory","1g").set("spark.serializer", KryoSerializer.class.getName());
            JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));

            // Create an input stream with the custom receiver on target ip:port and count the
            // words in input stream of \n delimited text (eg. generated by 'nc')
            JavaReceiverInputDStream<Tuple2<String, Integer>> tuples = ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createInputOperator(new DSPConnectorConfig.Builder()
                    .withDSP("spark")
                    .withBufferConnectorString("recvbuffer")
                    .withRequestAddress("localhost", 9656, DSPConnectorFactory.ConnectorType.PRIMARY)
                    .withRequestAddress("localhost", 9666, DSPConnectorFactory.ConnectorType.PRIMARY)
                    .build()));

            //      Count each word in each batch
            JavaPairDStream<String, Integer> pairs = tuples.mapToPair(
                    (PairFunction<Tuple2<String, Integer>, String, Integer>) s -> new Tuple2<>(s._1, s._2)
            );


            //      Cumulate the sum from each batch
            JavaPairDStream<String, Integer> wordCounts = pairs.reduceByKey(
                    (Function2<Integer, Integer, Integer>) (i1, i2) -> i1 + i2
            );

            wordCounts.print();
            ssc.start();
            ssc.awaitTermination();
        } catch(Exception ex) {
            System.err.println(ex.toString() + ex.getStackTrace());
        }
    }

    /**
     * (SOURCE)
     */
    @Test
    public void pullBasedApproachSecondarySource1() {
        try {

            SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[*]").set("spark.executor.memory","1g").set("spark.serializer", KryoSerializer.class.getName());
            JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));

            // Create an input stream with the custom receiver on target ip:port and count the
            // words in input stream of \n delimited text (eg. generated by 'nc')
            JavaReceiverInputDStream<Tuple2<String, Integer>> tuples = ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createInputOperator(new DSPConnectorConfig.Builder()
                    .withDSP("spark")
                    .withBufferConnectorString("recvbuffer")
                    .withRequestAddress("localhost", 9656, DSPConnectorFactory.ConnectorType.SECONDARY)
                    .withRequestAddress("localhost", 9666, DSPConnectorFactory.ConnectorType.SECONDARY)
                    .build()));

            //      Count each word in each batch
            JavaPairDStream<String, Integer> pairs = tuples.mapToPair(
                    (PairFunction<Tuple2<String, Integer>, String, Integer>) s -> new Tuple2<>(s._1, s._2)
            );


            //      Cumulate the sum from each batch
            JavaPairDStream<String, Integer> wordCounts = pairs.reduceByKey(
                    (Function2<Integer, Integer, Integer>) (i1, i2) -> i1 + i2
            );

            wordCounts.print();
            ssc.start();
            ssc.awaitTermination();
        } catch(Exception ex) {
            System.err.println(ex.toString() + ex.getStackTrace());
        }
    }
    // ======== Test end =======


    // Checkpointing test
    @Test
    public void sendData() {
        ZMQ.Context context = ZMQ.context(1);

        //  Socket to talk to server
        System.out.println("Connecting to hello world server…");

        ZMQ.Socket sender = context.socket(ZMQ.PUSH);
        sender.setSndHWM(1);
        sender.connect("tcp://localhost:9655");

        String testString =  "a b c d e f g h i j k l m n o p q r s t u v w x y z";

        System.out.println("Sending: " + testString);
        sender.send(SerializationTool.serialize(testString));
    }
}
