package de.tuberlin.mcc.geddsprocon.geddsproconexamples.geddsproconsparkexamples;

import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorConfig;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorFactory;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.serializer.KryoSerializer;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;
import scala.Tuple2;

public class SparkInputOperator {

    public static void main(String[] args) throws InterruptedException {
        SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[*]").set("spark.executor.memory","1g").set("spark.serializer", KryoSerializer.class.getName());
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));

        // Create an input stream with the custom receiver on target ip:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        JavaReceiverInputDStream<Tuple2<String, Integer>> tuples = ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createSourceConnector(new DSPConnectorConfig.Builder()
                .withDSP("spark")
                .withBufferConnectorString("recvbuffer")
                .withRequestAddress("192.168.56.102", 9656, DSPConnectorFactory.ConnectorType.SECONDARY)
                .withRequestAddress("192.168.56.102", 9666, DSPConnectorFactory.ConnectorType.SECONDARY)
                .build()));

        //      Count each word in each batch
        JavaPairDStream<String, Integer> pairs = tuples.mapToPair(
                (PairFunction<Tuple2<String, Integer>, String, Integer>) s -> new Tuple2<>(s._1, s._2)
        );


        //      Cumulate the sum from each batch
        JavaPairDStream<String, Integer> wordCounts = pairs.reduceByKey(
                (Function2<Integer, Integer, Integer>) (i1, i2) -> i1 + i2
        );

        wordCounts.print();
        ssc.start();
        ssc.awaitTermination();
    }
}
