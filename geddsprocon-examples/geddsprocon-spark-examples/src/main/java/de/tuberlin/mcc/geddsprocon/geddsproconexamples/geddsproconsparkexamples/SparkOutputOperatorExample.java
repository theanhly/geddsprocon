package de.tuberlin.mcc.geddsprocon.geddsproconexamples.geddsproconsparkexamples;

import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorConfig;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.DSPConnectorFactory;
import de.tuberlin.mcc.geddsprocon.geddsproconcore.SocketPool;
import org.apache.commons.lang.SerializationUtils;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;
import org.zeromq.ZMQ;
import scala.Tuple2;

import java.util.Arrays;

public class SparkOutputOperatorExample {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Connecting to hello world serverâ€¦");

        ZMQ.Context context = ZMQ.context(1);

        ZMQ.Socket sender = context.socket(ZMQ.PUSH);
        sender.connect("tcp://192.168.56.102:9665");

        String testString =  "HelloFromSpark a b c d e f g h i j k l m n o p q r s t u v w x y z";

        System.out.println("Sending: " + testString);
        sender.send(SerializationUtils.serialize(testString), 0);

        SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[3]");
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));

        // Create an input stream with the custom receiver on target ip:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        JavaReceiverInputDStream<String> lines =
                ssc.receiverStream((Receiver)DSPConnectorFactory.getInstance().createInputOperator(new DSPConnectorConfig.Builder("192.168.56.102", 9665)
                        .withDSP("spark")
                        .withSocketType(SocketPool.SocketType.PULL)
                        .build()));

        //      Split each line into words
        JavaDStream<String> words = lines.flatMap(
                (FlatMapFunction<String, String>) x -> Arrays.asList(x.split(" ")).iterator()
        );


        //      Count each word in each batch
        JavaPairDStream<String, Integer> pairs = words.mapToPair(
                (PairFunction<String, String, Integer>) s -> new Tuple2<>(s, 1)
        );

        pairs.foreachRDD((VoidFunction)DSPConnectorFactory.getInstance().createOutputOperator(new DSPConnectorConfig.Builder("192.168.56.102", 9656)
                .withDSP("spark")
                .withHWM(20)
                .withBufferConnectorString("sendbuffer")
                .withTimeout(10000)
                .build()));

        ssc.start();
        ssc.awaitTermination();
    }
}
